#!/usr/bin/env php
<?php
/**
 * Database migration script.
 *
 * Usage: db_migrate [(application|directory) [(up|down|version) [debug]]]
 *
 * Copyright 2010-2011 The Horde Project (http://www.horde.org/)
 *
 * See the enclosed file COPYING for license information (LGPL). If you
 * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html.
 *
 * @author Chuck Hagenbuch <chuck@horde.org>
 * @author Jan Schneider <jan@horde.org>
 */

require_once dirname(__FILE__) . '/../lib/Application.php';
Horde_Registry::appInit('horde', array(
    'authentication' => 'none',
    'cli' => true
));

// Parse command line arguments.
array_shift($_SERVER['argv']);
$args = $_SERVER['argv'];

$migration = new Horde_Core_Db_Migration(dirname(__FILE__) . '/../..');
if (empty($args[0])) {
    // Run all migrations.
    $apps = $migration->apps;
    $dirs = $migration->dirs;
} else {
    // Run a specific migration.
    $app = $args[0];
    if (($key = array_search($app, $migration->apps)) !== false) {
        $dir = $migration->dirs[$key];
    } elseif (($key = array_search($app, $migration->dirs)) !== false) {
        $dir = $app;
        $app = $migration->apps[$key];
    } else {
        $cli->fatal("$app is neither a configured Horde application nor a migration directory");
    }
    $dirs = array($dir);
    $apps = array($app);
}

$action = 'up';
if (!empty($args[1])) {
    switch ($args[1]) {
    case 'up':
    case 'down':
        $action = $args[1];
        break;

    default:
        $action = 'migrate';
        $targetVersion = $args[1];
        break;
    }
}

// Run
$db = $injector->getInstance('Horde_Db_Adapter');
$logger = new Horde_Log_Logger(new Horde_Log_Handler_Stream(STDOUT));
if (!empty($args[2]) && strpos($args[2], 'debug') !== false) {
    $db->setLogger($logger);
}

switch ($action) {
case 'up':
    $cli->message('Migrating DB up.');
    break;

case 'down':
    $cli->message('Migrating DB down.');
    break;

case 'migrate':
    $cli->message('Migrating DB to schema version ' . $targetVersion . '.');
    break;
}

foreach ($apps as $app) {
    $migrator = $migration->getMigrator($app, $logger);

    $cli->message("Current $app schema version: " . $migrator->getCurrentVersion());

    try {
        switch ($action) {
        case 'up':
            $migrator->up();
            break;

        case 'down':
            $migrator->down();
            break;

        case 'migrate':
            $migrator->migrate($targetVersion);
            break;
        }
    } catch (Exception $e) {
        echo $e->getMessage() . "\n";
        exit(1);
    }

    $cli->message("Ending $app schema version: " . $migrator->getCurrentVersion());
}
